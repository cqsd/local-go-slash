#!/usr/bin/env python3
import codecs
import os
import shutil
import sqlite3
import sys

from http.server import BaseHTTPRequestHandler, HTTPServer
from itertools import dropwhile


NOT_FOUND = '''
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>404 Not Found</title>
</head><body>
<h1>Not Found</h1>
<p>The requested URL /{path} was not found on this server.</p>
<hr>
<address>Garbage Server/0.0.1 at {host} Port {port}</address>
</body></html>
'''


# trying to avoid deps like jinja
def paths_to_index(paths):
    '''`paths` is a dict of short:full'''
    acc = (
        '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">'
        '<html><head>'
        '<title>Paths</title>'
        '</head><body>'
        '<h1>Current Path Config</h1>'
        '<table>'
        '<tr>'
        '<td><b>short</b></td>'
        '<td><b>visits</b></td>'
        '<td><b>full</b></td>'
        '</tr>'
    )
    for visits, short, full in paths:
        acc += (
            '<tr>'
            '<td><a target="_blank" href="http://go/{short}">{short}</a></td>'
            '<td>{visits}</td>'
            '<td><a target="_blank" href="{full}">{full}</a></td>'
            '</tr>'
        ).format(short=short, visits=visits, full=full)
    acc += (
        '</table>'
        '<hr>'
        '<address>Garbage Server/0.0.1 at {host} Port {port}</address>'
        '</body></html>'
    )
    return acc


def load_paths(paths_file):
    paths = dict()
    with open(paths_file, 'r') as f:
        for line in f:
            short, *full = map(lambda s: s.strip(), line.split(','))
            paths[short] = ''.join(full)

    return paths


def redirect_handler_class(port, paths_file):
    class RedirectServerHandler(BaseHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            self.host = os.uname().nodename  # supposedly doesn't work on windows
            self.port = port
            self.paths_file = paths_file
            self.db = sqlite3.connect(paths_file)

            super(RedirectServerHandler, self).__init__(*args, **kwargs)

        def do_GET(self):
            # get rid of leading slashes. technically path should be like,
            # short_path?
            path, *_rest = ''.join(
                dropwhile(lambda c: c == '/', self.path)
            ).split('/')
            rest = '/'.join(_rest) if _rest else ''
            record = self.db.execute(
                'select full from Links where short = ?',
                [path]).fetchone()

            if not path or path == '/':
                self.send_headers(
                    path='index.html',
                    content_type='text/html',
                    response=200)
                self.end_headers()  # see base class
                records = self.db.execute(
                    'select visits, short, full from Links'
                    ' order by visits desc, short'
                ).fetchall()
                self.wfile.write(
                    codecs.encode(
                        paths_to_index(records).format(
                            path=path,
                            host=self.host,
                            port=self.port),
                        'ascii')
                )
            elif record:
                full_path = os.path.join(record[0], rest) if rest else record[0]
                self.send_response(302)
                self.send_header('Location', full_path)
                self.end_headers()  # see base class
                self.db.execute(
                    'update Links set visits = visits + 1'
                    ' where short = ?',
                    [path])
                self.db.commit()
            else:
                self.send_headers(
                    path='404.html',
                    content_type='text/html',
                    response=404)
                self.end_headers()  # see base class
                self.wfile.write(codecs.encode(
                    NOT_FOUND.format(path=path, host=self.host, port=self.port),
                    'ascii')
                )

        def send_headers(self, path, content_type, response=200):
            self.send_response(response)
            self.send_header('Content-type', content_type)

    return RedirectServerHandler


def list_paths_cmd(args):
    with sqlite3.connect(args.paths_file) as db:
        records = []
        if args.short:
            for short in args.short:
                record = db.execute(
                    'select short, full, visits from Links where short = ?',
                    [short]
                ).fetchone()
                if record:
                    records.append(record)
        else:
            records += db.execute(
                'select short, full, visits from Links'
                ' order by visits desc, short'
            ).fetchall()

    if records:
        term_width = shutil.get_terminal_size().columns
        left_width = max([len(short) for short, *_ in records])
        # minimum full link display length 30
        # 12 comes from: arrow and pad (3+2) + left number and pad (3+1) \
        #   + implicit right pad (3) = 12
        right_width = max(term_width - left_width - 12, 60)
        for short, full, visits in records:
            if len(full) >= right_width:
                if args.long:
                    pass
                else:
                    full = full[:right_width - 3] + '...'
            print('{:3} {:{left_width}} --> {}'.format(
                visits or ' ',
                short,
                full,
                left_width=left_width))


def add_path_cmd(args):
    short, full = args.short, args.full
    with sqlite3.connect(args.paths_file) as db:
        db.execute(
            'insert into Links (short, full) values (?, ?)',
            [short, full])
        db.commit()
        print('Added {} --> {}'.format(short, full))


def rm_path_cmd(args):
    for short in args.short:
        with sqlite3.connect(args.paths_file) as db:
            record = db.execute(
                'select short, full from Links where short = ?',
                [short]).fetchone()
        if record:
            db.execute(
                'delete from Links where short = ?',
                [short])
            db.commit()
            print('Removed {} --> {}'.format(*record))
        else:
            print('Couldn\'t find {}'.format(short))


def mv_path_cmd(args):
    old = args.old
    new = args.new
    try:
        with sqlite3.connect(args.paths_file) as db:
            record = db.execute(
                'select full, visits, accessed, created from Links'
                ' where short = ?',
                [old]).fetchone()
            if record:
                new_record = [new] + list(record)
                record = db.execute(
                    'insert into Links'
                    ' (short, full, visits, accessed, created)'
                    ' values (?, ?, ?, ?, ?)',
                    new_record).fetchone()
                db.execute(
                    'delete from Links where short = ?',
                    [old])
                print('Renamed "{}" to "{}"'.format(old, new))
            else:
                print('Couldn\'t find {}'.format(old))
    except sqlite3.IntegrityError:
        print('Failed renaming {old} to {new} ({new} already exists)'.format(
            old=repr(old),
            new=repr(new)
        ))


def run_server_cmd(args):
    import socket

    port = args.port
    paths_file = args.paths_file
    address = ('', port)

    try:
        httpd = HTTPServer(address, redirect_handler_class(port, paths_file))
        sa = httpd.socket.getsockname()
        sys.stdout.write(
            'Serving HTTP on {} port {} (http://{}:{}/) ...\n'.format(*(sa * 2))
        )
        httpd.serve_forever()
    except socket.error:
        sys.stderr.write(
            'Error opening socket for port {}.\n'
            'You can pass a different port to the server as an argument.\n'
            ''.format(port)  # mfw ''.format
        )
    except KeyboardInterrupt:
        sys.stderr.write(
            '\nKeyboard interrupt received, exiting.\n'
        )
    except Exception:
        sys.stderr.write(
            '\nLol, something broke.\n'
        )
        sys.exit(1)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser('slash', description='Local go/ server admin tool')
    parser.set_defaults(func=None)
    parser.add_argument(
        '-f',
        '--paths-file',
        help='specific sqlite db to list from',
        type=str,
        default=os.getenv('LOCAL_GO_SLASH_DB_FILE'))

    subparsers = parser.add_subparsers(title='subcommands')

    list_subparser = subparsers.add_parser(
        'list',
        help='List available links',
        aliases=['ls'])
    list_subparser.add_argument('short', metavar='SHORT', help='specific links to list', nargs='*')
    list_subparser.add_argument('--long', '-l', help='output full link', action='store_true', default=False)
    list_subparser.set_defaults(func=list_paths_cmd)

    add_subparser = subparsers.add_parser('add', help='Add a link')
    add_subparser.add_argument('short', help='Short version of the link')
    add_subparser.add_argument('full', help='Full link')
    add_subparser.set_defaults(func=add_path_cmd)

    rm_subparser = subparsers.add_parser('rm', help='Remove a link')
    rm_subparser.add_argument('short', help='Short version of the link to remove', nargs='+')
    rm_subparser.set_defaults(func=rm_path_cmd)

    mv_subparser = subparsers.add_parser('mv', help='Rename a link')
    mv_subparser.add_argument('old', help='Short version of the link to rename')
    mv_subparser.add_argument('new', help='New name')
    mv_subparser.set_defaults(func=mv_path_cmd)

    run_subparser = subparsers.add_parser('run', help='Run the server')
    run_subparser.add_argument('port', help='port to run on', type=int, default=8000)
    run_subparser.set_defaults(func=run_server_cmd)

    args = parser.parse_args()

    if args.func:
        if not args.paths_file:
            sys.stderr.write(
                'No paths file specified.\n'
                'Did you set LOCAL_GO_SLASH_REDIRECTS_FILE?\n'
            )
            sys.exit(1)
        args.func(args)
    else:
        parser.print_usage()
